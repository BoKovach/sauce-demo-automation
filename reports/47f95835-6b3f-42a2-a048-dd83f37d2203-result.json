{"name": "test_logout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_login_logout.TestLogInLogOut object at 0x000001BA6D0F2F40>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"df07e8a56c212c5ed71a02651fbb501d\")>\n\n    @pytest.mark.logout\n    def test_logout(self, driver):\n        login = LoginPage(driver)\n        login.open()\n        login.login(login_data[0]['username'], login_data[0]['password'])\n    \n        assert driver.current_url == login_data[0]['expected_url']\n    \n>       login.logout()\n\ntests\\test_login_logout.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login_page.py:30: in logout\n    logout_button = WebDriverWait(self.driver, 5)\\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"df07e8a56c212c5ed71a02651fbb501d\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001BA6C53A550>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "start": 1752640623649, "stop": 1752640630236, "uuid": "7b96d21d-ca13-4e07-a22b-507c344cd92d", "historyId": "5d77fe6a01e943d8f7140dcba5f7eb91", "testCaseId": "5d77fe6a01e943d8f7140dcba5f7eb91", "fullName": "tests.test_login_logout.TestLogInLogOut#test_logout", "labels": [{"name": "tag", "value": "logout"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login_logout"}, {"name": "subSuite", "value": "TestLogInLogOut"}, {"name": "host", "value": "Tong-Bo"}, {"name": "thread", "value": "23680-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login_logout"}]}